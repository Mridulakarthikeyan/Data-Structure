#include<stdio.h>
#include<stdlib.h>
struct node
{
    
    int data;
    struct node*next;
};
struct node*link;
void insertatfront(int data)
{
    struct node*new;
    new=(struct node*)malloc(sizeof(struct node));
    if(new==NULL)
    {
        printf("no memory");
    }
    else
    {
        new->data=data;
        if(link==NULL)
        {
            new->next=NULL;
            link=new;
        }
        else
        {
            new->next=link;
            link=new;
        }
    }
}
struct node*link, *temp;
void insertatend(int data) 
{
    struct node*new;
    new=(struct node*)malloc(sizeof(struct node));
    if(new==NULL)
    {
        printf("no memory");
    }
    else
    {
        new->data=data;
        if(link==NULL)
        {
            new->next=NULL;
            head=new;
        }
        else
        {
            temp=link;
            while(temp->next!=NULL)
            {
                temp=temp->next;
            }
            temp->next=new;
            new->next=NULL;
        }
    }
}
struct node*link, *temp;
void insertatmiddle(int data)
{
    struct node*new;
    new=(struct node*)malloc(sizeof(struct node));
    if(new==NULL)
    {
        printf("no memory");
    }
    else
    {
        int pos, i;
        printf("enter the pos:");
        scanf("%d", &pos);
        new->data=data;
        temp=link;
        for(i=1;i<pos-1;i++)
        {
            temp=temp->next;
        }
        new->next=temp->next;
        temp->next=new;
        new->prev=temp;
    }
}
struct node*head, *temp;
void deleteatfront()
{
    if(link==NULL)
    {
        printf("list is empty");
    }
    else
    {
        temp=link;
        link=link->next;
        free(temp);
    }
}
struct node*link, *temp, *prev;
void deleteatend() 
{
    if(link==NULL)
    {
        printf("list is empty");
    }
    else
    {
        temp=link;
        while(temp->next!=NULL)
        {
            prev=temp;
            temp=temp->next;
        }
        prev->next=NULL;
        free(temp);
    }
}
struct node*link, *temp, *prev;
void deleteatmiddle() 
{
    if(link==NULL)
    {
        printf("list is empty");
    }
    else
    {
        int pos, i;
        printf("enter the position:");
        scanf("%d", &pos);
        temp=head;
        for(i=1;i<pos;i++)
        {
            prev=temp;
            temp=temp->next;
        }
        free(temp);
    }
}
struct node*link, *temp;
void search() 
{
    int key, c=0;
    printf("enter the num to search:");
    scanf("%d", &key);
    temp=head;
    while(temp!=NULL) 
    {
    if(temp->data==key) 
    {
        c=1;
        break;
    }
    temp=temp->next;
  }
    if(c==1)
    {
        printf("found");
    }
    else
    {
        printf("not found");
    }
}   
void display()
{
    temp=head;
    while(temp!=NULL) 
    {
        printf("%d\t",temp->data);
        temp=temp->next;
    }
    printf("\n");
}

void main() 
{
    insertatfront(60);
    insertatfront(50);
    insertatfront(40);
    display();
    insertatend(30);
    insertatend(20);
    display();
    insertatmiddle(10);
    display();
    deleteatfront();
    display();
    deleteatend();
    display();
    deleteatmiddle();
    display();
    search();
    
}
